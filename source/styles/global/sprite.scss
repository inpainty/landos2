// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$flag-name: 'flag';
$flag-x: 159px;
$flag-y: 0px;
$flag-offset-x: -159px;
$flag-offset-y: 0px;
$flag-width: 120px;
$flag-height: 124px;
$flag-total-width: 279px;
$flag-total-height: 260px;
$flag-image: '../images/sprite.png';
$flag: (159px, 0px, -159px, 0px, 120px, 124px, 279px, 260px, '../images/sprite.png', 'flag', );
$gears-name: 'gears';
$gears-x: 0px;
$gears-y: 0px;
$gears-offset-x: 0px;
$gears-offset-y: 0px;
$gears-width: 159px;
$gears-height: 126px;
$gears-total-width: 279px;
$gears-total-height: 260px;
$gears-image: '../images/sprite.png';
$gears: (0px, 0px, 0px, 0px, 159px, 126px, 279px, 260px, '../images/sprite.png', 'gears', );
$pencil-name: 'pencil';
$pencil-x: 95px;
$pencil-y: 126px;
$pencil-offset-x: -95px;
$pencil-offset-y: -126px;
$pencil-width: 90px;
$pencil-height: 131px;
$pencil-total-width: 279px;
$pencil-total-height: 260px;
$pencil-image: '../images/sprite.png';
$pencil: (95px, 126px, -95px, -126px, 90px, 131px, 279px, 260px, '../images/sprite.png', 'pencil', );
$rocket-name: 'rocket';
$rocket-x: 0px;
$rocket-y: 126px;
$rocket-offset-x: 0px;
$rocket-offset-y: -126px;
$rocket-width: 95px;
$rocket-height: 134px;
$rocket-total-width: 279px;
$rocket-total-height: 260px;
$rocket-image: '../images/sprite.png';
$rocket: (0px, 126px, 0px, -126px, 95px, 134px, 279px, 260px, '../images/sprite.png', 'rocket', );
$spritesheet-width: 279px;
$spritesheet-height: 260px;
$spritesheet-image: '../images/sprite.png';
$spritesheet-sprites: ($flag, $gears, $pencil, $rocket, );
$spritesheet: (279px, 260px, '../images/sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
